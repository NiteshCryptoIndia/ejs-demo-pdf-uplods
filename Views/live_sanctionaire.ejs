<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title> Sanction Questionnaire </title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
    integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
     <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
  <style>
    body {
      font-family: "Plus Jakarta Sans", sans-serif;
      margin: 0;
      padding: 0;
      line-height: 1.6;
      font-size: 13px;
    }

    .header,
    .footer {
      position: fixed;
      left: 0;
      right: 0;
      background: #ffffff;
      padding: 20px 0;
      max-width: 800px;
      margin: 0 auto;
      z-index: 1;
    }

    .header {
      top: 0;
      border-bottom: 1px solid #b4b4b4;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .header small {
      font-size: 12px;
      line-height: 1.2;
      margin: 0 0 5px;
      display: block;

    }

    .header h2 {
      font-size: 22px;
      line-height: 1;
      margin: 0;
    }

    .footer {
      bottom: 0;
      border-top: 1px solid #b4b4b4;
      text-align: center;
      font-size: 12px;
    }

    .footer p {
      margin: 0;
    }

    .content {
      max-width: 800px;
      margin: 100px auto 50px auto;
      padding: 10px 0;
      position: relative;
    }

    .letterhead small {
      position: absolute;
      top: -7px;
      left: 0;
    }

    .letterhead {
      text-align: center;
      margin-bottom: 20px;
    }

    .letterhead p {
      font-size: 11px;
    }

    .letterhead p strong {
      font-size: 20px;

    }

    .sender,
    .receiver,
    .date,
    .time {
      margin-bottom: 20px;
    }


    .signature {
      margin-top: 50px;
    }

    .d-flex {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .sn_img {
      text-align: center;
    }

    .sn_img img {
      margin: 0 auto 4px;
      display: block;
    }

    .sn_img small {
      font-size: 10px;
    }


    .columns {
      display: flex;
      gap: 40px;
    }

    .column {
      flex: 1;
    }

    label {
      display: block;
      margin: 4px 0;
    }




    /* Print settings */
    @media print {

      /* @page  {
        padding-top: 120px;  
      }   */


      .content {
        max-width: 800px;
        margin: 10px auto 10px auto;
        /* space for header & footer */
        padding: 10px 0;
      }

      /* Force page breaks for demo */
      .page-break {
        page-break-before: always;
        margin-bottom: 0px;
      }

      .header,
      .footer {
        position: relative;
      }
    }

    
   /* loading css */

/* #loading_main{
  display: block;
} */

      .loading-wave {
        width: 300px;
        height: 100px;
        display: flex;
        justify-content: center;
        align-items: flex-end;
      }

      .loading-bar {
        width: 5px;
        height: 10px;
        margin: 0 5px;
        background-color: #ffd900ce;
        border-radius: 5px;
        animation: loading-wave-animation 1s ease-in-out infinite;
      }

      .loading-bar:nth-child(2) {
        animation-delay: 0.1s;
      }

      .loading-bar:nth-child(3) {
        animation-delay: 0.2s;
      }

      .loading-bar:nth-child(4) {
        animation-delay: 0.3s;
      }

      @keyframes loading-wave-animation {
        0% {
          height: 5px;
        }

        50% {
          height: 35px;
        }

        100% {
          height: 5px;
        }
      } 
      /* loading css end */


      /* 404 page found css start */
      
.page_404{ padding:40px 0; background:#fff; font-family: 'Arvo', serif;
}

.page_404  img{ width:100%;}

.four_zero_four_bg{
 
 background-image: url(https://cdn.dribbble.com/users/285475/screenshots/2083086/dribbble_1.gif);
    height: 400px;
    background-position: center;
 }
 
 
 .four_zero_four_bg h1{
 font-size:80px;
 }
 
  .four_zero_four_bg h3{
			 font-size:80px;
			 }
			 
			 .link_404{			 
	color: #fff!important;
    padding: 10px 20px;
    background: #39ac31;
    margin: 20px 0;
    display: inline-block;}
	.contant_box_404{ margin-top:-50px;}
      /* 404 page found css end */
  </style>
</head>

<body>

  <main>
    <div
      style="width: 100%; height: 100%; position: fixed; align-items: center; justify-self: center; background: #fff; z-index: 999;" id="loading_main">
      <div class="loading-wave" style="width: 100%; height: 100%; align-items: center;">
        <div class="loading-bar"></div>
        <div class="loading-bar"></div>
        <div class="loading-bar"></div>
        <div class="loading-bar"></div>
      </div> 
    </div>

 <!-- PDF Render Area -->
<% if (tokenValid) { %>
 <div id="viewer-col" class="col">
        <div class="pdf_viewer">
          <style>
            .pdf_viewer {
              font-family: "Plus Jakarta Sans", sans-serif;
              margin: 0;
              padding: 0;
              line-height: 1.6;
              background: #fff;
              font-size: 13px;
            }

            .header,
            .footer {
              position: relative;
              left: 0;
              right: 0;
              padding: 20px 0;
              max-width: 800px;
              margin: 0 auto;
            }

            .header {
              border-bottom: 1px solid #b4b4b4;
              display: flex;
              align-items: center;
              justify-content: space-between;
            }

            .header small {
              font-size: 12px;
              margin: 0 0 5px;
              display: block;
            }

            .header h2 {
              font-size: 22px;
              margin: 0;
            }

            .footer {
              border-top: 1px solid #b4b4b4;
              text-align: center;
              font-size: 12px;
            }

            .footer p {
              margin: 0;
            }

            .content {
              max-width: 800px;
              margin: 50px auto;
              padding: 10px 0;
            }

            .letterhead {
              text-align: center;
              margin-bottom: 20px;
            }

            .letterhead small {
              position: absolute;
              top: -7px;
              left: 0;
            }

            .letterhead p {
              font-size: 11px;
            }

            .letterhead p strong {
              font-size: 20px;
            }

            .sn_img {
              text-align: center;
            }

            .sn_img img {
              margin: 0 auto 4px;
              display: block;
            }

            .sn_img small {
              font-size: 10px;
            }

            @media print {
              .content {
                max-width: 800px;
                margin: 10px auto;
              }
              .page-break {
                page-break-before: always;
                margin-bottom: 0;
              }
            }
          </style>
  <!-- Fixed Header -->
  <div class="header">
    <h2> Entity Name Here</h2>
    <div class="logo">
      <img src="https://dev.cryptoindia.in/logo.svg" width="110" class="img-fluid" alt="" />
    </div>
  </div>
  <!-- Letter Content -->
  <div class="content">

    <div class="letterhead">
      <small> DOC ID : <%- docId %> </small>
      <p><strong> Sanctions Questionnaire </strong>
      </p>
    </div>

    <div class="date">
      <p>Date: <%- date %></p>
    </div>

    <p> Legal Entity Name: <b><%- entityName %> </b> </p>
    <p> CIN/ Registration Number: <b><%- RegistionNumber %> </b> </p>
    <p> Registered Address :<b><%- address %>  </b> </p>
    <p>Company's Operations Address: <b><%- CompanyOprationaddress %>  </b> </p>
    <br />
    <p> Please tick whichever region is applicable:
    </p>
    <form class="table-responsive" onsubmit="handleSubmit(event)">
      <div class="table-responsive">
        <table border="1" class="table table-bordered "
          style=" text-align: start; border-collapse: collapse; width: 100%;">
          <tr style="vertical-align: middle;">
            <td>
              <p style=" max-width: 450px; padding: 10px">Does your Company or any Director directly or
                indirectly engage in or plan to engage in activity with
                or in any of the following Sanctioned Countries /
                Regions?</p>
            </td>
            <td>
              <div>
                <label style="display: flex; align-items: center; gap: 8px; padding: 4px 0;" for="Sanctioned1">
                  <input type="radio" id="Sanctioned1" name="sanctioned" value="yes">
                  Yes
                </label>

                <label style="display: flex; align-items: center; gap: 8px; padding: 4px 0;" for="Sanctioned2">
                  <input type="radio" id="Sanctioned2" name="sanctioned" value="no">
                  No
                </label>
              </div>
            </td>
          </tr>
          <tr>
            <td style="padding: 10px 10px 10px 10px;">
              <p> <b>Grey Listed Countries</b> </p>
              <ul>
                <% const graylistCountries=[ "Democratic Republic of the Congo" , "Gibraltar" , "Haiti" , "Jamaica"
                  , "Jordan" , "Mali" , "Mozambique" , "Nigeria" , "Panama" , "Philippines" , "Senegal" , "South Africa"
                  , "South Sudan" , "Syria" , "Tanzania" , "Turkey" , "Uganda" , "United Arab Emirates (UAE)" , "Yemen"
                  ].forEach(c=> { %>

                  <label style="display: flex; align-items: center; gap: 8px; padding: 4px 0; "><input type="checkbox"
                      name="greyList" value="<%= c %>">
                    <%= c %>
                  </label>
                  <% }) %>
              </ul>
            </td>
            <td style="vertical-align: top; ">
              <div class="" style="padding: 0 10px 10px 10px; ">
                <p> <b>Blacklisted Countries</b> </p>
                <% const blacklistCountries=[ "North Korea" , "Iran" , "No One from both list" ].forEach(c=> { %>

                  <label style="display: flex; align-items: center; gap: 8px; padding: 4px 0; "><input type="checkbox"
                      name="blackList" value="<%= c %>">
                    <%= c %>
                  </label>
                  <% }) %>

              </div>
              <!-- <hr />
            <div class="" style="padding: 10px; ">
              <p> Entity Name: <b>---------- </b> </p>
              <p> Mobile Number:: <b>---------- </b> </p>
              <p> Date :<b>---------- </b> </p>
            </div> -->
              <hr />
              <div class="" style="padding: 10px; ">
                <p> Company Stamp & Signature of Authorized Signatory </p>
              </div>
            </td>
          </tr>
        </table>
      </div>


      <br />
      <p> Please sign or upload photo
      </p>


      <div class="table-responsive">
        <table class="table table-bordered" style="text-align:center; border-collapse: collapse; width:100%;">
          <thead style="font-size: 12px;" class="table-dark">
            <tr>
              <th>Name</th>
              <th>Email</th>
              <th>Declaration Date </th>
              <th>Signature</th>
              <th>Photo</th>
            </tr>
          </thead>
          <tbody>
            <% mainTrader.forEach((director, index)=> { %>
              <tr>
                <td>
                  <%= director.name %>
                </td>
                <td>
                  <%= director.email_id %>
                </td>
                <td>
                  <%= director.panNumber %>
                </td>

                <!-- Signature Column -->
                <td>
                  <% if (paramId===director.directorId) { %>
                    <div class="sn_img">
                      <div id="signature-preview-box-<%= index %>"
                        style="width:200px; height:120px; border:1px solid #ccc; display:flex; align-items:center; justify-content:center; margin-bottom:10px;">
                        <span style="color:gray; font-size:12px;">No signature selected</span>
                      </div>
                      <input type="file" accept="image/*" onchange="previewSignatureUpload(event,<%= index %>)"
                        class="form-control mb-2" />
                      <button type="button" class="btn btn-outline-dark btn-sm mb-2" data-bs-toggle="modal"
                        data-bs-target="#signatureModal-<%= index %>">
                        Capture Signature
                      </button>
                      <input type="hidden" id="signature-input-<%= index %>" name="signature" />
                    </div>

                    <!-- Signature Camera Modal -->
                    <div class="modal fade" id="signatureModal-<%= index %>" tabindex="-1">
                      <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content p-3">
                          <div class="modal-header">
                            <h5 class="modal-title">Capture Signature</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"
                              onclick="closeSignatureCamera(<%= index %>)"></button>
                          </div>
                          <div class="modal-body text-center">
                            <video id="signature-video-<%= index %>" width="100%" height="200" autoplay></video>
                            <small class="d-block mt-2 text-muted">Allow camera & location access</small>
                          </div>
                          <div class="modal-footer d-flex justify-content-between">
                            <button type="button" class="btn btn-danger" data-bs-dismiss="modal"
                              onclick="closeSignatureCamera(<%= index %>)">Close</button>
                            <button type="button" class="btn btn-success"
                              onclick="captureSignature(<%= index %>)">Snap</button>
                          </div>
                        </div>
                      </div>
                    </div>
                    <% } else { %>
                      <span style="color:gray;">Only accessible to this director</span>
                      <% } %>
                </td>

                <!-- Photo Column -->
                <td>
                  <% if (paramId===director.directorId) { %>
                    <div class="sn_img">
                      <div id="photo-preview-box-<%= index %>"
                        style="width:200px; height:120px; border:1px solid #ccc; display:flex; align-items:center; justify-content:center; margin-bottom:10px;">
                        <span style="color:gray; font-size:12px;">No photo captured</span>
                      </div>
                      <button type="button" class="btn btn-outline-dark btn-sm mb-2" data-bs-toggle="modal"
                        data-bs-target="#photoModal-<%= index %>">
                        Capture Photo
                      </button>
                      <input type="hidden" id="photo-input-<%= index %>" name="photo" />
                      <input type="hidden" id="latitude-<%= index %>" />
                      <input type="hidden" id="longitude-<%= index %>" />
                    </div>

                    <!-- Photo Camera Modal -->
                    <div class="modal fade" id="photoModal-<%= index %>" tabindex="-1">
                      <div class="modal-dialog modal-dialog-centered">
                        <div class="modal-content p-3">
                          <div class="modal-header">
                            <h5 class="modal-title">Capture Photo</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"
                              onclick="closePhotoCamera(<%= index %>)"></button>
                          </div>
                          <div class="modal-body text-center">
                            <video id="photo-video-<%= index %>" width="100%" height="200" autoplay></video>
                            <small class="d-block mt-2 text-muted">Allow camera & location access</small>
                          </div>
                          <div class="modal-footer d-flex justify-content-between">
                            <button type="button" class="btn btn-danger" data-bs-dismiss="modal"
                              onclick="closePhotoCamera(<%= index %>)">Close</button>
                            <button type="button" class="btn btn-success"
                              onclick="capturePhoto(<%= index %>)">Snap</button>
                          </div>
                        </div>
                      </div>
                    </div>
                    <% } else { %>
                      <span style="color:gray;">Only accessible to this director</span>
                      <% } %>
                </td>
              </tr>
              <% }) %>
          </tbody>
        </table>

        <!-- <small>dd/mm/yyyy, 00:00 PM <br /> DOC ID: #5451321</small> -->
        <button type="submit" class="btn btn-dark mt-3">Submit</button>
      </div>
    </form>

    <br />




  </div>

  <!-- Fixed Footer -->
  <div class="footer">
    <p> DOC ID: #56465652165465 </p>
    <p> support@cryptoindia.in | www.cryptoindia.in </p>
  </div>
        </div>
        </div>
         <% } else { %>
         <section class="page_404">
	<div class="container">
		<div class="row">	
		<div class="col-sm-12 ">
		<div class="col-sm-10 col-sm-offset-1  text-center">
		<div class="four_zero_four_bg">
			<h1 class="text-center ">404</h1>
		
		
		</div>
		
<div class="contant_box_404">
    <h3 class="h2">
        Your session token has expired.
    </h3>

    <p>the page you are looking for not avaible!</p>

    <a href="https://cryptoindia.in/" class="link_404">Go to Home</a>
</div>
</div>
</div>
</div>
</div>
</section>


<% } %>

  </main>
</body>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
           document.getElementById("loading_main").style.display = "flex";
  setTimeout(() => {
    document.getElementById("loading_main").style.display = "none";
  }, 1000); // simulate 3s API delay
  /* ================= Signature Functions ================= */
  function previewSignatureUpload(event, index) {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function (e) {
        document.getElementById(`signature-preview-box-${index}`).innerHTML =
          `<img src="${e.target.result}" style="max-width:100%; max-height:100%;" />`;
        document.getElementById(`signature-input-${index}`).value = e.target.result;
      };
      reader.readAsDataURL(file);
    }
  }

  // When signature modal opens → check location → start camera
  document.addEventListener("shown.bs.modal", function (event) {
    const modal = event.target;
    if (modal.id.startsWith("signatureModal-")) {
      const index = modal.id.split("-")[1];
      requestLocationForSignature(index, modal);
    }
  });

   function showErrorAndCloseModal(title, message, modalEl) {
  Swal.fire({
    icon: "error",
    title: title || "Error!",
    text: message,
    confirmButtonText: "OK",
    confirmButtonColor: "#d33"
  }).then(() => {
    bootstrap.Modal.getInstance(modalEl).hide();
  });
}

  function requestLocationForSignature(index, modalEl) {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        () => openSignatureCamera(index),
        () => {
          showErrorAndCloseModal("Location Access Denied","Cannot capture signature.",modalEl)
        }
      );
    } else {
      showErrorAndCloseModal("Geolocation not supported","Cannot capture image.",modalEl)
    }
  }

  function openSignatureCamera(index) {
    const video = document.getElementById(`signature-video-${index}`);
    navigator.mediaDevices.getUserMedia({ video: true })
      .then(stream => video.srcObject = stream)
      .catch(() => {
         Swal.fire({
    icon: "error",
    title: "Camera Not Accessible",
    text: "Signature capture failed.",
    confirmButtonText: "close",
    confirmButtonColor: "#d33"
  })
      });
  }

  function captureSignature(index) {
    const video = document.getElementById(`signature-video-${index}`);
    if (!video.srcObject) {
      Swal.fire({
        icon: "error",
        title: "No Camera Stream",
        text: "Signature capture not possible.",
        confirmButtonText: "close",
        confirmButtonColor: "#d33"
      });
      return;
    }
    const canvas = document.createElement("canvas");
    canvas.width = 200;
    canvas.height = 120;
    const ctx = canvas.getContext("2d");
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
    const dataURL = canvas.toDataURL("image/png");

    document.getElementById(`signature-preview-box-${index}`).innerHTML =
      `<img src="${dataURL}" style="max-width:100%; max-height:100%;" />`;
    document.getElementById(`signature-input-${index}`).value = dataURL;

    bootstrap.Modal.getInstance(document.getElementById(`signatureModal-${index}`)).hide();
    closeSignatureCamera(index);
  }

  function closeSignatureCamera(index) {
    const video = document.getElementById(`signature-video-${index}`);
    if (video.srcObject) {
      video.srcObject.getTracks().forEach(track => track.stop());
      video.srcObject = null;
    }
  }

  /* ================= Photo Functions ================= */
  document.addEventListener("shown.bs.modal", function (event) {
    const modal = event.target;
    if (modal.id.startsWith("photoModal-")) {
      const index = modal.id.split("-")[1];
      requestLocationForPhoto(index, modal);
    }
  });

  function requestLocationForPhoto(index, modalEl) {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        () => openPhotoCamera(index),
        () => {
          showErrorAndCloseModal("Location access denied!","Location access denied! Cannot capture photo.",modalEl)
        }
      );
    } else {
      showErrorAndCloseModal("Geolocation not supported","Location access denied! Cannot capture photo.",modalEl)
    }
  }

  function openPhotoCamera(index) {
    const video = document.getElementById(`photo-video-${index}`);
    navigator.mediaDevices.getUserMedia({ video: true })
      .then(stream => video.srcObject = stream)
      .catch(() => {
        Swal.fire({
        icon: "error",
        title: "Camera not accessible",
        text: "Photo capture not possible.",
        confirmButtonText: "OK",
        confirmButtonColor: "#d33"
      })
      });
  }

  function capturePhoto(index) {
    const video = document.getElementById(`photo-video-${index}`);
    if (!video.srcObject) {
       Swal.fire({
        icon: "error",
        title: "No Camera Stream",
        text: "Photo capture not possible.",
        confirmButtonText: "OK",
        confirmButtonColor: "#d33"
      });
      return;
    }
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          document.getElementById(`latitude-${index}`).value = position.coords.latitude;
          document.getElementById(`longitude-${index}`).value = position.coords.longitude;
        },
        () => {
           Swal.fire({
        icon: "error",
        title: "Location permission denied.",
        text: "Photo capture not possible.",
        confirmButtonText: "OK",
        confirmButtonColor: "#d33"
      })
        }
      );
    } else {
       Swal.fire({
        icon: "error",
        title: "Geolocation not supported.",
        text: "Photo capture not possible.",
        confirmButtonText: "OK",
        confirmButtonColor: "#d33"
      })
    }
    const canvas = document.createElement("canvas");
    canvas.width = video.videoWidth || 200;
    canvas.height = video.videoHeight || 200;
    const ctx = canvas.getContext("2d");
    ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
    const dataURL = canvas.toDataURL("image/png");

    document.getElementById(`photo-preview-box-${index}`).innerHTML =
      `<img src="${dataURL}" style="max-width:100%; max-height:100%;" />`;
    document.getElementById(`photo-input-${index}`).value = dataURL;

    bootstrap.Modal.getInstance(document.getElementById(`photoModal-${index}`)).hide();
    closePhotoCamera(index);
  }

  function closePhotoCamera(index) {
    const video = document.getElementById(`photo-video-${index}`);
    if (video.srcObject) {
      video.srcObject.getTracks().forEach(track => track.stop());
      video.srcObject = null;
    }
  }


  // --- Signature/photo upload/capture preview logic ---
  var directors = <%- JSON.stringify(mainTrader) %>;
  var paramId = '<%= paramId %>';
  var currentSignatureIndex = null;
  console.log(directors)

  document.addEventListener('DOMContentLoaded', function () {
    // Signature upload/capture button in table opens modal for correct director
    document.querySelectorAll('.signature-capture-btn').forEach(function (btn) {
      btn.addEventListener('click', function () {
        currentSignatureIndex = btn.getAttribute('data-index');
      });
    });

    // Modal signature upload
    var modalSigUpload = document.getElementById('modal-signature-upload');
    if (modalSigUpload) {
      modalSigUpload.addEventListener('change', function (e) {
        var file = e.target.files[0];
        console.log(file)
        if (!file) return;
        var reader = new FileReader();
        reader.onload = function (evt) {
          var idx = currentSignatureIndex;
          var sigCanvas = document.getElementById('canvas-signature-' + idx);
          if (sigCanvas) {
            var img = new Image();
            img.onload = function () {
              var ctx = sigCanvas.getContext('2d');
              ctx.clearRect(0, 0, sigCanvas.width, sigCanvas.height);
              ctx.drawImage(img, 0, 0, sigCanvas.width, sigCanvas.height);
            };
            img.src = evt.target.result;
          }
        };
        reader.readAsDataURL(file);
      });
    }

    function openCamera(index, type) {
      const video = document.getElementById(`${type}-video-${index}`);
      video.classList.remove("hidden");

      navigator.mediaDevices.getUserMedia({ video: true })
        .then(stream => {
          video.srcObject = stream;
        })
        .catch(() => alert("Camera not available."));
    }
    // Open file dialog when label is clicked
    var label = document.querySelector('label.btn-dark input#modal-signature-upload');
    if (label) {
      label.parentElement.addEventListener('click', function () {
        window.setTimeout(function () {
          modalSigUpload.value = '';
        }, 100);
      });

    }

    // Modal signature capture button
    var modalCaptureBtn = document.getElementById('modal-signature-capture-btn');
    if (modalCaptureBtn) {
      modalCaptureBtn.onclick = function () {
        var idx = currentSignatureIndex;
        var video = document.getElementById('signature-video-modal');
        var sigCanvas = document.getElementById('canvas-signature-' + idx);
        if (video && sigCanvas) {
          var ctx = sigCanvas.getContext('2d');
          ctx.drawImage(video, 0, 0, sigCanvas.width, sigCanvas.height);
          if (video.srcObject) {
            video.srcObject.getTracks().forEach(track => track.stop());
          }
          video.classList.add('hidden');
        }
      };
    }

    // Photo file upload (unchanged)
    directors.forEach(function (director, index) {
      if (paramId === director.directorId) {
        var photoFile = document.getElementById('photo-file-' + index);
        var photoCanvas = document.getElementById('canvas-photo-' + index);
        var photoPreview = document.getElementById('photo-preview-' + index);
        if (photoFile) {
          photoFile.addEventListener('change', function (e) {
            var file = e.target.files[0];
            if (!file) return;
            var reader = new FileReader();
            reader.onload = function (evt) {
              var img = new Image();
              img.onload = function () {
                var ctx = photoCanvas.getContext('2d');
                ctx.clearRect(0, 0, photoCanvas.width, photoCanvas.height);
                ctx.drawImage(img, 0, 0, photoCanvas.width, photoCanvas.height);
                photoPreview.src = evt.target.result;
                photoPreview.style.display = 'inline-block';
              };
              img.src = evt.target.result;
            };
            reader.readAsDataURL(file);
          });
        }
        // Photo capture (from canvas)
        var photoCaptureBtns = document.querySelectorAll('.photo-capture-btn[data-index="' + index + '"]');
        photoCaptureBtns.forEach(function (btn) {
          btn.addEventListener('click', function () {
            var dataUrl = photoCanvas.toDataURL('image/png');
            photoPreview.src = dataUrl;
            photoPreview.style.display = 'inline-block';
          });
        });
      }
    });
  });




  async function handleSubmit(event) {
    event.preventDefault();
      document.getElementById("loading_main").style.display = "flex";

    const directorData = <%- JSON.stringify(mainTrader) %>;
    const paramId = "<%= paramId %>";
    const token = "<%= token %>";
    const userId = "<%= userId %>";
    const docId = "<%= docId %>";

    const payloads = [];

    directorData.forEach((director, index) => {
      if (director.directorId === paramId) {
        const signature = document.getElementById(`signature-input-${index}`).value;
        const photo = document.getElementById(`photo-input-${index}`).value;
        const latitude = document.getElementById(`latitude-${index}`).value;
        const longitude = document.getElementById(`longitude-${index}`).value;
        const greyList= Array.from(document.querySelectorAll("input[name='greyList']:checked")).map(i => i.value) || [];
        const blackList= Array.from(document.querySelectorAll("input[name='blackList']:checked")).map(i => i.value) || [];
        const selectedValue= document.querySelector("input[name='sanctioned']:checked")?.value || null;
console.log(signature)
console.log(photo)
        if (!signature || !photo) {
            document.getElementById("loading_main").style.display = "none";
            Swal.fire({
        title: 'Missing Signature & Photo',
        text: 'Please capture your signature and upload a photo before submitting.',
        icon: 'error', // Options: 'success', 'error', 'warning', 'info', 'question'
        confirmButtonText: 'ok'
      })
          return;
        }
         if (payloads?.[0]?.selectedValue === null) {
            document.getElementById("loading_main").style.display = "none";
           Swal.fire({
        title: 'Error!',
        text: 'You cannot select Grey Listed Countries or Blacklisted Countries while also selecting No One from both list.',
        icon: 'error', // Options: 'success', 'error', 'warning', 'info', 'question'
        confirmButtonText: 'ok'
      })
      return;
    }
    if (!greyList?.length || !blackList?.length) {
        document.getElementById("loading_main").style.display = "none";
       Swal.fire({
        title: 'Error!',
        text: 'You cannot select Grey Listed Countries or Blacklisted Countries while also selecting No One from both list. Please review your choices and ensure they are consistent',
        icon: 'error', // Options: 'success', 'error', 'warning', 'info', 'question'
        confirmButtonText: 'ok'
      })
      return;
    }
      //   if (selectedValue === 'yes') {
      //       Swal.fire({
      //   title: 'Missing Signature & Photo',
      //   text: 'Please capture your signature and upload a photo before submitting.',
      //   icon: 'error', // Options: 'success', 'error', 'warning', 'info', 'question'
      //   confirmButtonText: 'ok'
      // })
      //     return;
      //   }

        payloads.push({
          directorID: director.directorId,
          name: director.name,
          email: director.email_id,
          sig_image: signature,        // Signature image base64
          userPhoto: photo,        // Photo image base64
          panNumber: director.panNumber,
          docname: "Sanction",
          userId,
          latitude,
          longitude,
          docId,
          greyList: greyList,
          blackList:blackList,
          selectedValue: selectedValue

        });
      }
    });
    console.log(payloads)



if (!payloads.length) {
    document.getElementById("loading_main").style.display = "none";
  Swal.fire({
    title: "No Data",
    text: "No directors found to submit.",
    icon: "warning",
    confirmButtonText: "OK",
  });
  return;
}
   

 try {
  const results = await Promise.all(
    payloads.map(async (data) => {
      try {
        const res = await fetch(`/v1/user/entity/submitSanctionSignature/${token}`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(data),
        });

        if (!res.ok) {
          return { success: false, message: `HTTP ${res.status}` };
        }

        return await res.json();
      } catch (e) {
        console.error("Network error:", e);
        return { success: false, message: "Network error" };
      }
    })
  );

  console.log("API Responses:", results);

  // check if all submissions succeeded
  const allSuccess = results.every(r => r && r.success);
  const failedOnes = results.filter(r => !r.success);

 if (allSuccess) {
    Swal.fire({
      icon: "success",
      title: "Submitted successfully",
      text: "PDF will be generated.",
      confirmButtonText: "OK",
      confirmButtonColor: "#3085d6"
    }).then(() => {
      // ✅ Agar redirect karna ho
      // window.location.href = "/download-pdf";
    });
  } else {
    Swal.fire({
      icon: "warning",
      title: "Some submissions failed",
      text: "Please check and try again.",
      confirmButtonText: "Close",
      confirmButtonColor: "#f0ad4e"
    });
  }
} catch (err) {
  console.error(err);
  Swal.fire({
    icon: "error",
    title: "Submission Error",
    text: "Something went wrong. Please try again.",
    confirmButtonText: "Close",
    confirmButtonColor: "#d33"
  });
}finally{
  document.getElementById("loading_main").style.display = "none";
}

  }



</script>

</html>